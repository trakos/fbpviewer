{{ if .Values.migrationEnabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: job-migration
  annotations:
    "helm.sh/hook": post-install,post-upgrade
spec:
  template:
    spec:
      imagePullSecrets:
        - name: docker-registry-secret
      restartPolicy: Never
      containers:
        - name: migration
          image: "{{ .Values.dockerRegistryPrefix }}fbpviewer_prod_php"
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          command: ["make", "migrate"]
          env:
            {{ if .Values.doctrine.walletSso }}
            - name: ORACLE_CWALLET_SSO
              valueFrom:
                secretKeyRef:
                  name: database-credentials
                  key: wallet_sso
            {{ end }}
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: database-credentials
                  key: url
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: database-credentials
                  key: user
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: database-credentials
                  key: password
            - name: APP_ENV
              value: "prod"
---
{{ end }}
{{ if .Values.s3_backups.cronSchedule }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: job-mysql-backup
spec:
  schedule: {{ .Values.s3_backups.cronSchedule }}
  jobTemplate:
    spec:
      template:
        spec:
          imagePullSecrets:
            - name: docker-registry-secret
          restartPolicy: Never
          containers:
            - name: restore
              image: "{{ .Values.dockerRegistryPrefix }}fbpviewer_mysql_shell"
              imagePullPolicy: {{ .Values.imagePullPolicy }}
              command: ["/backup.sh"]
              env:
                - name: DATABASE_HOST
                  value: mysql
                - name: DATABASE_NAME
                  valueFrom:
                    secretKeyRef:
                      name: database-credentials
                      key: databaseName
                - name: DATABASE_USER
                  value: root
                - name: DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: database-credentials
                      key: rootPassword
                - name: S3_ENDPOINT_URL
                  valueFrom:
                    secretKeyRef:
                      name: s3-credentials
                      key: endpointUrl
                - name: S3_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      name: s3-credentials
                      key: accessKeyId
                - name: S3_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: s3-credentials
                      key: secretAccessKey
---
{{ end }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: job-mysql-restore
spec:
  # 30th of February run, will never be run automatically, only when we trigger it
  schedule: "0 0 30 2 0"
  jobTemplate:
    spec:
      template:
        spec:
          imagePullSecrets:
            - name: docker-registry-secret
          restartPolicy: Never
          containers:
            - name: restore
              image: "{{ .Values.dockerRegistryPrefix }}fbpviewer_mysql_shell"
              imagePullPolicy: {{ .Values.imagePullPolicy }}
              command: ["/restore.sh"]
              env:
                - name: DATABASE_HOST
                  value: mysql
                - name: DATABASE_NAME
                  valueFrom:
                    secretKeyRef:
                      name: database-credentials
                      key: databaseName
                - name: DATABASE_USER
                  value: root
                - name: DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: database-credentials
                      key: rootPassword
                - name: S3_ENDPOINT_URL
                  valueFrom:
                    secretKeyRef:
                      name: s3-credentials
                      key: endpointUrl
                - name: S3_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      name: s3-credentials
                      key: accessKeyId
                - name: S3_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: s3-credentials
                      key: secretAccessKey
